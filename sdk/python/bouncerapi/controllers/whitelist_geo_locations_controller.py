# -*- coding: utf-8 -*-

"""
    bouncerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bouncerapi.api_helper import APIHelper
from bouncerapi.configuration import Configuration
from bouncerapi.controllers.base_controller import BaseController
from bouncerapi.http.auth.custom_auth import CustomAuth
from bouncerapi.models.remove_response_1 import RemoveResponse1
from bouncerapi.models.update_response_1 import UpdateResponse1
from bouncerapi.models.create_response_1 import CreateResponse1
from bouncerapi.models.get_details_response_1 import GetDetailsResponse1
from bouncerapi.models.list_response_1 import ListResponse1
from bouncerapi.exceptions.return_exception import ReturnException

class WhitelistGeoLocationsController(BaseController):

    """A Controller to access Endpoints in the bouncerapi API."""


    def remove(self,
                entry_id,
                body):
        """Does a DELETE request to /v1.1/whitelists/geolocations/{entry_id}/delete.

        Remove a Geo Location in the Whitelist

        Args:
            entry_id (string): a unique identifier for the Geo Location;
                opaque but likely a GUID
            body (GeoLocation): TODO: type description here. Example: 

        Returns:
            RemoveResponse1: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/whitelists/geolocations/{entry_id}/delete'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'entry_id': entry_id
        })
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.delete(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RemoveResponse1.from_dictionary)

    def update(self,
                entry_id,
                body):
        """Does a PUT request to /v1.1/whitelists/geolocations/{entry_id}/update.

        Update a Geo Location in the Whitelist

        Args:
            entry_id (string): a unique identifier for the Geo Location;
                opaque but likely a GUID
            body (GeoLocation): TODO: type description here. Example: 

        Returns:
            UpdateResponse1: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/whitelists/geolocations/{entry_id}/update'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'entry_id': entry_id
        })
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, UpdateResponse1.from_dictionary)

    def create(self,
                body):
        """Does a POST request to /v1.1/whitelists/geolocations/create.

        Create a Geo Location in the Whitelist. When POSTed-to this endpoint,
        Bouncer scans `geolist.txt` for any IPs matching the Country Code (CC)
        in the POSTed object and, for each: Bouncer will create a new
        ipaddress in this list (black- or white-list).

        Args:
            body (GeoLocation): TODO: type description here. Example: 

        Returns:
            CreateResponse1: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/whitelists/geolocations/create'
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CreateResponse1.from_dictionary)

    def get_details(self,
                    entry_id):
        """Does a GET request to /v1.1/whitelists/geolocations/{entry_id}.

        Get Details of a Geo Location Entry in the Whitelist

        Args:
            entry_id (string): a unique identifier for the Geo Location;
                opaque but likely a GUID

        Returns:
            GetDetailsResponse1: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/whitelists/geolocations/{entry_id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'entry_id': entry_id
        })
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetDetailsResponse1.from_dictionary)

    def list(self):
        """Does a GET request to /v1.1/whitelists/geolocations.

        List all Geo Locations in the Whitelist

        Returns:
            ListResponse1: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/whitelists/geolocations'
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ListResponse1.from_dictionary)
