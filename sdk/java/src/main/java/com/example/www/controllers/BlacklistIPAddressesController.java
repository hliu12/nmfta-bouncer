/*
 * BouncerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.www.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.example.www.*;
import com.example.www.models.*;
import com.example.www.exceptions.*;
import com.example.www.http.client.HttpClient;
import com.example.www.http.client.HttpContext;
import com.example.www.http.request.HttpRequest;
import com.example.www.http.response.HttpResponse;
import com.example.www.http.response.HttpStringResponse;
import com.example.www.http.client.APICallBack;
import com.example.www.controllers.syncwrapper.APICallBackCatcher;

public class BlacklistIPAddressesController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static BlacklistIPAddressesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the BlacklistIPAddressesController class 
     */
    public static BlacklistIPAddressesController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new BlacklistIPAddressesController();
                }
            }
        }
        return instance;
    }

    /**
     * Update an IP Address in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @param    body    Required parameter: Example: 
     * @return    Returns the UpdateResponse response from the API call 
     */
    public UpdateResponse update(
                final String entryId,
                final IPAddress body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateRequest(entryId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateResponse(_context);
    }

    /**
     * Update an IP Address in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @param    body    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateAsync(
                final String entryId,
                final IPAddress body,
                final APICallBack<UpdateResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateRequest(entryId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            UpdateResponse returnValue = _handleUpdateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for update
     */
    private HttpRequest _buildUpdateRequest(
                final String entryId,
                final IPAddress body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses/{entry_id}/update");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entry_id", entryId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for update
     * @return An object of type void
     */
    private UpdateResponse _handleUpdateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        UpdateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<UpdateResponse>(){});

        return _result;
    }

    /**
     * Remove an IP Address in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @param    body    Required parameter: Example: 
     * @return    Returns the RemoveResponse response from the API call 
     */
    public RemoveResponse remove(
                final String entryId,
                final IPAddress body
    ) throws Throwable {

        HttpRequest _request = _buildRemoveRequest(entryId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRemoveResponse(_context);
    }

    /**
     * Remove an IP Address in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @param    body    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void removeAsync(
                final String entryId,
                final IPAddress body,
                final APICallBack<RemoveResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRemoveRequest(entryId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            RemoveResponse returnValue = _handleRemoveResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for remove
     */
    private HttpRequest _buildRemoveRequest(
                final String entryId,
                final IPAddress body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses/{entry_id}/delete");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entry_id", entryId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().deleteBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for remove
     * @return An object of type void
     */
    private RemoveResponse _handleRemoveResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RemoveResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RemoveResponse>(){});

        return _result;
    }

    /**
     * Get Details of an IP Address Entry in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @return    Returns the GetDetailsResponse response from the API call 
     */
    public GetDetailsResponse getDetails(
                final String entryId
    ) throws Throwable {

        HttpRequest _request = _buildGetDetailsRequest(entryId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetDetailsResponse(_context);
    }

    /**
     * Get Details of an IP Address Entry in the Blacklist
     * @param    entryId    Required parameter: a unique identifier for the IP Address; opaque but likely a GUID
     * @return    Returns the void response from the API call 
     */
    public void getDetailsAsync(
                final String entryId,
                final APICallBack<GetDetailsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetDetailsRequest(entryId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetDetailsResponse returnValue = _handleGetDetailsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getDetails
     */
    private HttpRequest _buildGetDetailsRequest(
                final String entryId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses/{entry_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entry_id", entryId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for getDetails
     * @return An object of type void
     */
    private GetDetailsResponse _handleGetDetailsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetDetailsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetDetailsResponse>(){});

        return _result;
    }

    /**
     * Create an IP Address in the Blacklist
     * @param    body    Required parameter: Example: 
     * @return    Returns the CreateResponse response from the API call 
     */
    public CreateResponse create(
                final IPAddress body
    ) throws Throwable {

        HttpRequest _request = _buildCreateRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateResponse(_context);
    }

    /**
     * Create an IP Address in the Blacklist
     * @param    body    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createAsync(
                final IPAddress body,
                final APICallBack<CreateResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CreateResponse returnValue = _handleCreateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for create
     */
    private HttpRequest _buildCreateRequest(
                final IPAddress body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses/create");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for create
     * @return An object of type void
     */
    private CreateResponse _handleCreateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CreateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CreateResponse>(){});

        return _result;
    }

    /**
     * Search for IP Addresses in the Blacklist
     * @param    searchFilter    Required parameter: an comma-separated lsit of IP addresses in CIDR format (`192.168.100.14/24`) except with `/` replaced by `+`
     * @return    Returns the SearchResponse response from the API call 
     */
    public SearchResponse search(
                final String searchFilter
    ) throws Throwable {

        HttpRequest _request = _buildSearchRequest(searchFilter);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleSearchResponse(_context);
    }

    /**
     * Search for IP Addresses in the Blacklist
     * @param    searchFilter    Required parameter: an comma-separated lsit of IP addresses in CIDR format (`192.168.100.14/24`) except with `/` replaced by `+`
     * @return    Returns the void response from the API call 
     */
    public void searchAsync(
                final String searchFilter,
                final APICallBack<SearchResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildSearchRequest(searchFilter);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            SearchResponse returnValue = _handleSearchResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for search
     */
    private HttpRequest _buildSearchRequest(
                final String searchFilter) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses/filter/{search_filter}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("search_filter", searchFilter);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for search
     * @return An object of type void
     */
    private SearchResponse _handleSearchResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        SearchResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SearchResponse>(){});

        return _result;
    }

    /**
     * List all IP Addresses in the Blacklist
     * @return    Returns the ListResponse response from the API call 
     */
    public ListResponse list(
    ) throws Throwable {

        HttpRequest _request = _buildListRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleListResponse(_context);
    }

    /**
     * List all IP Addresses in the Blacklist
     * @return    Returns the void response from the API call 
     */
    public void listAsync(
                final APICallBack<ListResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildListRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListResponse returnValue = _handleListResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for list
     */
    private HttpRequest _buildListRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1.1/blacklists/ipaddresses");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        // Custom Authentication to be added for authorization
        CustomAuthUtility.appendCustomAuthParams(_request);

        return _request;
    }

    /**
     * Processes the response for list
     * @return An object of type void
     */
    private ListResponse _handleListResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new ReturnException("Unexpected error in API call. See HTTP response body for details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListResponse>(){});

        return _result;
    }

}
