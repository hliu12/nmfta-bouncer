/*
 * BouncerAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BouncerAPI.Standard;
using BouncerAPI.Standard.Utilities; 
using BouncerAPI.Standard.Http.Client;
using BouncerAPI.Standard.Http.Response;
using BouncerAPI.Tests.Helpers;
using NUnit.Framework;
using BouncerAPI.Standard;
using BouncerAPI.Standard.Controllers;
using BouncerAPI.Standard.Exceptions;

namespace BouncerAPI.Tests
{
    [TestFixture]
    public class WhitelistControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static WhitelistController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Whitelist;
        }

        /// <summary>
        /// This will list the entire contents of the Whitelist including both IP Addresses and Geo Locations. 
        /// </summary>
        [Test]
        public async Task TestAllContents1() 
        {

            // Perform API call
            Standard.Models.AllContentsResponse result = null;

            try
            {
                result = await controller.AllContentsAsync();
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.AreEqual("{  \"Result\": {    \"Status\": \"Success\",    \"Message\": \"\"  },  \"IPAddresses\": [    [      \"884d9804999fc47a3c2694e49ad2536a\",      \"192.168.100.14/24\"    ]  ],  \"GeoLocations\": [    \"884d9804999fc47a3c2694e49ad2536a#CA\"  ]}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody),
                    "Response body should match exactly (string literal match)");
        }

    }
}