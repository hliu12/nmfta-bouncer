# -*- coding: utf-8 -*-

"""
    bouncerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class GeoLocation(object):

    """Implementation of the 'Geo Location' model.

    The geolocation information referenced by Bouncer when building `ufw`
    rules

    Attributes:
        country_code (string): ISO Country Code
        start_date (string): Starting UTC Date and time for entry
        end_date (string): Ending UTC Date and time for entry
        comments (string): Any notes or description for the entry, maximum
            length of 3000 characters
        active (bool): Identifies if the entry is active

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_code":'Country Code',
        "start_date":'Start_Date',
        "end_date":'End_Date',
        "comments":'Comments',
        "active":'Active'
    }

    def __init__(self,
                 country_code=None,
                 start_date=None,
                 end_date=None,
                 comments=None,
                 active=None):
        """Constructor for the GeoLocation class"""

        # Initialize members of the class
        self.country_code = country_code
        self.start_date = start_date
        self.end_date = end_date
        self.comments = comments
        self.active = active


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        country_code = dictionary.get('Country Code')
        start_date = dictionary.get('Start_Date')
        end_date = dictionary.get('End_Date')
        comments = dictionary.get('Comments')
        active = dictionary.get('Active')

        # Return an object of this model
        return cls(country_code,
                   start_date,
                   end_date,
                   comments,
                   active)


