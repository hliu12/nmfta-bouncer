FORMAT: 1A

# Bouncer API

![Bouncer Logo](https://raw.githubusercontent.com/nmfta-repo/nmfta-bouncer/master/project-bouncer-small.png)

The API for the bouncer firewall appliance, automating blacklisting via `ufw`. See https://github.com/nmfta-repo/nmfta-bouncer for the server code.

The version documented here is API version `1.1`. All endpoints below have a `/v1.1/` leading path element.

## Authentication

This API uses Custom HTTP Header Bearer-token authentication. The following headers are required to be sent with each request

```http
Authorization: Bearer {access token from /login}
```

## Working with Date and Time

Dates and times in the API are treated as opaque data types at present. Any date-time format can be used as long as the code consuming it is consistent with the code populating it.

We recommend all times in UTC, formatted using ISO 8601 string (format `yyyy-MM-ddTHH:mm:ss.fffZ`).

## Error Codes

Errors in this API are returned in JSON objects with error code references in an `Error` field. If an endpoint returns a status code other than `200` then it will return a JSON error object indicating the error in `Error` field. No descriptions of the error will be provided, client code or developers need to consult the table here to understand the value in the `Error` field.

| Endpoint                                   | Error Code | Description                                                                           |
|:-------------------------------------------|:----------:|:--------------------------------------------------------------------------------------|
| `/register`                                | 1001       | User Name is required                                                                 |
|                                            | 1002       | Password is required                                                                  |
|                                            | 1003       | Duplicate User Name / User already exists                                             |
|                                            | 1004       | User name too long                                                                    |
|                                            | 1005       | Invalid Password                                                                      |
| `/login`                                   | 2000       | Missing User Name                                                                     |
|                                            | 2001       | Missing Password                                                                      |
|                                            | 2002       | Missing Grant type                                                                    |
|                                            | 2003       | Invalid User or password is not valid                                                 |
| `/whitelists/IPAddresses/create`           | 3000       | IPv4 or IPv6 is required                                                              |
|                                            | 3001       | IP Address is invalid                                                                 |
|                                            | 3002       | Start Date is required                                                                |
|                                            | 3003       | Start Date is invalid                                                                 |
|                                            | 3004       | End Date is required                                                                  |
|                                            | 3005       | End Date is invalid                                                                   |
|                                            | 3006       | End Date needs to be greater than Start Date                                          |
|                                            | 3007       | Comments too long (restrict to 3000 characters or less)                               |
|                                            | 3008       | IP Address already whitelisted                                                        |
|                                            | 3009       | IP Address currently blacklisted, remove it from blacklist before adding to whitelist |
| `/blacklists/IPAddresses/create`           | 4000       | IPv4 or IPv6 is required                                                              |
|                                            | 4001       | IP Address is invalid                                                                 |
|                                            | 4002       | Start Date is required                                                                |
|                                            | 4003       | Start Date is invalid                                                                 |
|                                            | 4004       | End Date is required                                                                  |
|                                            | 4005       | End Date is invalid                                                                   |
|                                            | 4006       | End Date needs to be greater than Start Date                                          |
|                                            | 4007       | Comments too long (restrict to 3000 characters or less)                               |
|                                            | 4008       | IP Address already blacklisted                                                        |
|                                            | 4009       | IP Address currently whitelisted, remove it from whitelist before adding to blacklist |
|`/whitelists/ipaddresses/{entry_ id}/delete`| 5000       | Entry Id is required and should be an integer                                         |
|                                            | 5001       | Entry Id not found                                                                    |
| `/blacklists/ipaddresses/{entry_id}/delete`| 6000       | Entry Id is required and should be an integer                                         |
|                                            | 6001       | Entry Id not found                                                                    |

# Group Whitelist

## All Contents [GET /v1.1/whitelists]

This will list the entire contents of the Whitelist including both IP Addresses and Geo Locations.

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + IPAddresses                                            (array[IP Address Array Pair], required, fixed-type) - matching IP Address Objects found
        + GeoLocations:    `884d9804999fc47a3c2694e49ad2536a#CA` (array[string], required, fixed-type) - matching Geo Location Objects (in short string form `{id}#{cc}`) found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Whitelist: IP Addresses

## Search [GET /v1.1/whitelists/ipaddresses/filter/{search_filter}]

Search for IP Addresses in the Whitelist

+ Parameters
    + search_filter:         `192.168.100.0+24,192.168.101.0+24` (string, required) - an comma-separated lsit of IP addresses in CIDR format (`192.168.100.14/24`) except with `/` replaced by `+`

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + SearchResult                                           (object)
            + Input_IP:      `192.168.100.0/24,192.168.101.0/24` (string, required) - the input search string, with the proper '/' in CIDR, not '+' as needed in the endpoint URL
            + Entries                                            (array[IP Address Entry Pair], required, fixed-type) - matching IP Address and Object Entry IDs

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## List [GET /v1.1/whitelists/ipaddresses]

List all IP Addresses in the Whitelist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + IPAddresses                                            (array[IP Address Array Pair], required, fixed-type) - matching IP Address Objects found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Get Details [GET /v1.1/whitelists/ipaddresses/{entry_id}]

Get Details of an IP Address Entry in the Whitelist

+ Parameters
    + entry_id:              `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + Entry                                                  (IP Address)

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Create [POST /v1.1/whitelists/ipaddresses/create]

Create an IP Address in the Whitelist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly created IP Address; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Update [PUT /v1.1/whitelists/ipaddresses/{entry_id}/update]

Update an IP Address in the Whitelist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly updated IP Address; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Remove [DELETE /v1.1/whitelists/ipaddresses/{entry_id}/delete]

Remove an IP Address in the Whitelist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the deleted IP Address ; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Whitelist: Geo Locations

## List [GET /v1.1/whitelists/geolocations]

List all Geo Locations in the Whitelist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + GeoLocations:    `884d9804999fc47a3c2694e49ad2536a#CA` (array[string], required, fixed-type) - matching Geo Location Objects (in short string form `{id}#{cc}`) found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Get Details [GET /v1.1/whitelists/geolocations/{entry_id}]

Get Details of a Geo Location Entry in the Whitelist

+ Parameters
    + entry_id:              `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + Entry                                                  (Geo Location)

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Create [POST /v1.1/whitelists/geolocations/create]

Create a Geo Location in the Whitelist. When POSTed-to this endpoint, Bouncer scans `geolist.txt` for any IPs matching the Country Code (CC) in the POSTed object and, for each: Bouncer will create a new ipaddress in this list (black- or white-list).

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly created Geo Location; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Update [PUT /v1.1/whitelists/geolocations/{entry_id}/update]

Update a Geo Location in the Whitelist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly updated Geo Location; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Remove [DELETE /v1.1/whitelists/geolocations/{entry_id}/delete]

Remove a Geo Location in the Whitelist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the deleted Geo Location ; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Blacklist

## All Contents [GET /v1.1/blacklists]

This will list the entire contents of the Whitelist including both IP Addresses and Geo Locations.

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + IPAddresses                                            (array[IP Address Array Pair], required, fixed-type) - matching IP Address Objects found
        + GeoLocations:    `884d9804999fc47a3c2694e49ad2536a#CA` (array[string], required, fixed-type) - matching Geo Location Objects (in short string form `{id}#{cc}`) found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Blacklist: IP Addresses

## Search [GET /v1.1/blacklists/ipaddresses/filter/{search_filter}]

Search for IP Addresses in the Blacklist

+ Parameters
    + search_filter:         `192.168.100.0+24,192.168.101.0+24` (string, required) - an comma-separated lsit of IP addresses in CIDR format (`192.168.100.14/24`) except with `/` replaced by `+`

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + SearchResult                                           (object)
            + Input_IP:      `192.168.100.0/24,192.168.101.0/24` (string, required) - the input search string, with the proper '/' in CIDR, not '+' as needed in the endpoint URL
            + Entries                                            (array[IP Address Entry Pair], required, fixed-type) - matching IP Address and Object Entry IDs

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## List [GET /v1.1/blacklists/ipaddresses]

List all IP Addresses in the Blacklist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + IPAddresses                                            (array[IP Address Array Pair], required, fixed-type) - matching IP Address Objects found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Get Details [GET /v1.1/blacklists/ipaddresses/{entry_id}]

Get Details of an IP Address Entry in the Blacklist

+ Parameters
    + entry_id:              `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + Entry                                                  (IP Address)

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Create [POST /v1.1/blacklists/ipaddresses/create]

Create an IP Address in the Blacklist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly created IP Address; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Update [PUT /v1.1/blacklists/ipaddresses/{entry_id}/update]

Update an IP Address in the Blacklist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly updated IP Address; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Remove [DELETE /v1.1/blacklists/ipaddresses/{entry_id}/delete]

Remove an IP Address in the Blacklist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the IP Address; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (IP Address)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the deleted IP Address ; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Blacklist: Geo Locations

## List [GET /v1.1/blacklists/geolocations]

List all Geo Locations in the Blacklist

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + GeoLocations:    `884d9804999fc47a3c2694e49ad2536a#CA` (array[string], required, fixed-type) - matching Geo Location Objects (in short string form `{id}#{cc}`) found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Get Details [GET /v1.1/blacklists/geolocations/{entry_id}]

Get Details of a Geo Location Entry in the Blacklist

+ Parameters
    + entry_id:              `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)

    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + Entry                                                  (Geo Location)

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Create [POST /v1.1/blacklists/geolocations/create]

Create a Geo Location in the Blacklist. When POSTed-to this endpoint, Bouncer scans `geolist.txt` for any IPs matching the Country Code (CC) in the POSTed object and, for each: Bouncer will create a new ipaddress in this list (black- or white-list).

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly created Geo Location; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Update [PUT /v1.1/blacklists/geolocations/{entry_id}/update]

Update a Geo Location in the Blacklist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the newly updated Geo Location; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Remove [DELETE /v1.1/blacklists/geolocations/{entry_id}/delete]

Remove a Geo Location in the Blacklist

+ Parameters
    + entry_id:               `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the Geo Location; opaque but likely a GUID

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

    + Attributes (Geo Location)

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
            + EntryID:        `884d9804999fc47a3c2694e49ad2536a` (string, required) - a unique identifier for the deleted Geo Location ; opaque but likely a GUID

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Check IP Addresses

## Test for List Membership [GET /v1.1/check/{ip_address}]

Check if an IP Address is Already White- or Black-Listed

+ Parameters
    + ip_address:                               `192.168.100.14` (string, required) - the IP address to check

+ Request
    + Headers

            Authorization: Bearer {access token from /login}

+ Response 200 (application/json)
    + Attributes (object)
        + Result                                                 (object, required)
            + List                                               (enum[string], required)
                + Sample: `Whitelist`
                + Members
                    + `Whitelist`
                    + `Blacklist`
            + Status:                                  `Success` (string, required, fixed)
            + Message                                            (string) - an optional message
        + Entry                                                  (IP Address, required) - matching IP Address Object found

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Group Users Login & Registration

## Login to Bouncer API [POST /v1.1/login]

Authenticate to this Bouncer instance.

+ Request

    + Attributes
        + username                                               (string, required)
        + password                                               (string, required)
        + grant_type                                             (string, required) - must be `password`

+ Response 200 (application/json)

    + Attributes (object)
        + access_token                                           (string, required) - the access token to use in all future requests
        + token_type:                                   `bearer` (string, required, fixed) - always `bearer`
        + expires_in                                             (string, required) - the expiry of this bearer token in seconds
        + claim_level:                                `complete` (string, required, fixed) - always `complete`

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

## Register New User [POST /v1.1/register]

ONLY AVAILABLE when Bouncer is started with the `--testing` parameter.

Register a new user with this instance of Bouncer.

+ Request

    + Attributes (object)
        + username:                                      `user1` (string, required) - new username
        + password:                                  `not123456` (string, required) - new user's password

+ Response 200 (application/json)

    + Attributes (object)
        + message:                 `all good with user creation` (string, required)

+ Response 400 (application/json)

        API Error

    + Attributes (Return)

# Data Structures

## Return (object)
The error return type

### Properties
+ Status:                                              `Invalid` (string, required) - The status of the return
+ Error:                                                  `1001` (string, required) - the error value

## IP Address (object)
The IP address information referenced by Bouncer when building `ufw` rules

### Properties
+ IPv4:                                      `192.168.100.14/24` (string) - IP Address v4 in CIDR Format. Either IPv4 or IPv6 MUST be present.
+ IPv6:                                          `2001:db8::/64` (string) - IP Address v6 in CIDR Format. Either IPv4 or IPv6 MUST be present.
+ Start_Date:                             `2019-04-05T02:04:16Z` (required, string) - Starting UTC Date and time for entry
+ End_Date:                               `2019-04-05T02:04:16Z` (required, string) - Ending UTC Date and time for entry
+ Comments:                                    `noteworthy note` (required, string) - Any notes or description for the entry, maximum length of 3000 characters
+ Active:                                                   true (required, boolean) - Identifies if the entry is active

## IP Address Entry Pair (object)
A shorter version of the IP Address Object used to return the CIDR form and an entry to be used for future reference

### Properties
+ EntryID:                    `884d9804999fc47a3c2694e49ad2536a` (string, required)  - a unique identifier for the newly created Geo Location; opaque but likely a GUID
+ IPv4:                                      `192.168.100.14/24` (string) - IP Address v4 in CIDR Format. Either IPv4 or IPv6 MUST be present.

## IP Address Array Pair (array)
+                             `884d9804999fc47a3c2694e49ad2536a` (string, required)  - a unique identifier for the newly created Geo Location; opaque but likely a GUID
+                                            `192.168.100.14/24` (string, required) - IP Address v4 in CIDR Format. Either IPv4 or IPv6 MUST be present.

## Geo Location (object)
The geolocation information referenced by Bouncer when building `ufw` rules

### Properties
+ Country Code:                                             `CA` (required, string) - ISO Country Code
+ Start_Date:                             `2019-04-05T02:04:16Z` (required, string) - Starting UTC Date and time for entry
+ End_Date:                               `2019-04-05T02:04:16Z` (required, string) - Ending UTC Date and time for entry
+ Comments:                                    `noteworthy note` (required, string) - Any notes or description for the entry, maximum length of 3000 characters
+ Active:                                                   true (required, boolean) - Identifies if the entry is active

