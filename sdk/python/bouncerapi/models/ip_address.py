# -*- coding: utf-8 -*-

"""
    bouncerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class IPAddress(object):

    """Implementation of the 'IP Address' model.

    The IP address information referenced by Bouncer when building `ufw`
    rules

    Attributes:
        i_pv_4 (string): IP Address v4 in CIDR Format. Either IPv4 or IPv6
            MUST be present.
        i_pv_6 (string): IP Address v6 in CIDR Format. Either IPv4 or IPv6
            MUST be present.
        start_date (string): Starting UTC Date and time for entry
        end_date (string): Ending UTC Date and time for entry
        comments (string): Any notes or description for the entry, maximum
            length of 3000 characters
        active (bool): Identifies if the entry is active

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_date":'Start_Date',
        "end_date":'End_Date',
        "comments":'Comments',
        "active":'Active',
        "i_pv_4":'IPv4',
        "i_pv_6":'IPv6'
    }

    def __init__(self,
                 start_date=None,
                 end_date=None,
                 comments=None,
                 active=None,
                 i_pv_4=None,
                 i_pv_6=None):
        """Constructor for the IPAddress class"""

        # Initialize members of the class
        self.i_pv_4 = i_pv_4
        self.i_pv_6 = i_pv_6
        self.start_date = start_date
        self.end_date = end_date
        self.comments = comments
        self.active = active


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        start_date = dictionary.get('Start_Date')
        end_date = dictionary.get('End_Date')
        comments = dictionary.get('Comments')
        active = dictionary.get('Active')
        i_pv_4 = dictionary.get('IPv4')
        i_pv_6 = dictionary.get('IPv6')

        # Return an object of this model
        return cls(start_date,
                   end_date,
                   comments,
                   active,
                   i_pv_4,
                   i_pv_6)


