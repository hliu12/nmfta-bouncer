# -*- coding: utf-8 -*-

"""
    bouncerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bouncerapi.api_helper import APIHelper
from bouncerapi.configuration import Configuration
from bouncerapi.controllers.base_controller import BaseController
from bouncerapi.http.auth.custom_auth import CustomAuth
from bouncerapi.models.test_for_list_membership_response import TestForListMembershipResponse
from bouncerapi.exceptions.return_exception import ReturnException

class CheckIPAddressesController(BaseController):

    """A Controller to access Endpoints in the bouncerapi API."""


    def test_for_list_membership(self,
                                 ip_address):
        """Does a GET request to /v1.1/check/{ip_address}.

        Check if an IP Address is Already White- or Black-Listed

        Args:
            ip_address (string): the IP address to check

        Returns:
            TestForListMembershipResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1.1/check/{ip_address}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'ip_address': ip_address
        })
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ReturnException('Unexpected error in API call. See HTTP response body for details.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, TestForListMembershipResponse.from_dictionary)
